---
export interface Props {
    entry: CollectionEntry<"learn"> & { data: { index: number } };
    nextThreeEntries: (CollectionEntry<"learn"> & {
        data: { index: number };
    })[];
    previousEntry?: CollectionEntry<"learn"> & { data: { index: number } };
    author: CollectionEntry<"authors">;
}
import GithubLink from "@components/github_link.astro";
import Icon from "@components/icon.astro";
import Goto from "@components/interactive/goto";
import SlugHeader from "@components/interactive/slug_header";
import Link from "@components/link.astro";
import PageLayout from "@layouts/PageLayout.astro";
import { CollectionEntry, getCollection, getEntries } from "astro:content";
export const prerender = true;

export async function getStaticPaths() {
    const entries = await getCollection("learn");

    const ordered = entries.map((e) => ({
        ...e,
        data: {
            ...e.data,
            index: Number(e.id.split("-")[0].substring(e.id.indexOf("/") + 1)),
        },
    }));

    const authors = await getEntries(entries.map((entry) => entry.data.author));

    return ordered.map((entry) => ({
        params: { slug: entry.slug },
        props: {
            entry,
            nextThreeEntries: ordered
                .filter(
                    (e) =>
                        e.data.index - entry.data.index <= 3 &&
                        e.data.index - entry.data.index > 0,
                )
                .sort((e1, e2) => e1.data.index - e2.data.index),
            previousEntry: ordered.find(
                (e) => e.data.index === entry.data.index - 1,
            ),
            author: authors.find(
                (author) => author.id === entry.data.author.id,
            ),
        },
    }));
}

const { entry, author, nextThreeEntries, previousEntry } = Astro.props;
const { Content } = await entry.render();

type Toc = {
    label: string;
    href: string;
    children: Toc[];
};

const createHref = (label: string) =>
    label
        .toLowerCase()
        .replace(/ /g, "-")
        .replace(/[^a-z0-9-]/g, "");

const toc = entry.body
    .split("\n")
    .filter((l) => l.startsWith("#"))
    .map((l) => l.substring(1).trim())
    .reduce<Toc[]>((acc, curr) => {
        if (!curr.startsWith("#")) {
            acc.push({
                label: curr,
                href: `#${createHref(curr)}`,
                children: [],
            });
        } else {
            const depth = curr.indexOf(" ");
            const label = curr.substring(depth + 1);
            if (curr.startsWith("# ")) {
                acc[acc.length - 1].children.push({
                    label,
                    href: `#${createHref(label)}`,
                    children: [],
                });
            }
            if (curr.startsWith("## ")) {
                acc[acc.length - 1].children[
                    acc[acc.length - 1].children.length - 1
                ].children.push({
                    label,
                    href: `#${createHref(label)}`,
                    children: [],
                });
            }
        }
        return acc;
    }, []);
---

<PageLayout
    title={entry.data.title}
    desc={entry.data.description}
    excludeMain={true}
>
    <Goto client:load />
    <main class="!pb-4">
        {
            previousEntry && (
                <span class="italic text-gray-400">
                    Go back to {previousEntry.data.index + 1}.{" "}
                    <Link href={`/learn/${previousEntry.slug}`}>
                        {previousEntry.data.title}
                    </Link>
                </span>
            )
        }
        <SlugHeader
            client:load
            label={`${entry.data.index + 1}. ${entry.data.title}`}
            author={author.data.name}
            href={"/learn/" + entry.slug}
            authorHref={author.data.portfolio}
            tags={entry.data.tags?.map((t) => ({
                label: t,
            }))}
        />
    </main>
    <section class="mt-4 !py-4 learn-post">
        <h1 class="learn post">Table of contents</h1>
        <ul class="mb-4">
            {
                toc.map((t) => (
                    <li>
                        <Link href={t.href}>{t.label}</Link>
                        {t.children.length > 0 && (
                            <ul>
                                {t.children.map((c) => (
                                    <li>
                                        <Link href={c.href}>{c.label}</Link>
                                        {c.children.length > 0 && (
                                            <ul>
                                                {c.children.map((cc) => (
                                                    <li>
                                                        <Link href={cc.href}>
                                                            {cc.label}
                                                        </Link>
                                                    </li>
                                                ))}
                                            </ul>
                                        )}
                                    </li>
                                ))}
                            </ul>
                        )}
                    </li>
                ))
            }
        </ul>
    </section>
    <section class="mt-4 !pb-0 learn-post">
        <Content />
        <GithubLink
            class="mb-6 mt-8 flex items-center gap-1 text-sm italic"
            path={`src/content/learn/${entry.id}`}
        >
            <Icon src="github" />
            Edit me on GitHub
        </GithubLink>
    </section>
    <section class="mt-8">
        <div>
            <h1
                class="text-2xl font-bold"
                id="bottom"
            >
                Next
            </h1>
            <ul class="ml-4 mt-2">
                {
                    nextThreeEntries.map((e, i) => (
                        <li>
                            <span class="select-none">{e.data.index + 1}.</span>
                            <Link href={`/learn/${e.slug}`}>
                                {e.data.title}
                            </Link>
                        </li>
                    ))
                }
            </ul>
        </div>
    </section>
</PageLayout>
