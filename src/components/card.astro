---
export interface Props {
    type: string;
    title?: string;
    metaTitle?: string;
    typeInfo?: string[];
    exampleInfo?: string[];
    isSSRAndClientHydrated?: boolean;
    hideClientHydrated?: boolean;
    hideClientRendered?: boolean;
}
import Code from "@components/code.astro";
import GithubLink from "@components/github_link.astro";
import Link from "@components/link.astro";
import {
    GetCodeAndLines,
    GetEndpointCodeAndLines,
    GetExtension,
    GetTypeInfo,
    GetVersion,
} from "@utils";
const {
    type,
    title,
    metaTitle,
    typeInfo: givenTypeInfo,
    exampleInfo,
    isSSRAndClientHydrated,
    hideClientHydrated,
    hideClientRendered,
} = Astro.props;

const example = Astro.locals.example;

const extension = GetExtension(type);
const version = GetVersion(type, metaTitle);
const typeInfo = GetTypeInfo(type, givenTypeInfo);
const fullPath = `src/examples/${type}/${example}${version}.${extension}`;
const { code, lines } = GetCodeAndLines(fullPath);

const endpoint = GetEndpointCodeAndLines(type, example);
---

<details class="w-full rounded-xl bg-slate-700 px-8 py-4 text-white shadow-lg">
    <summary class="text-3xl font-bold capitalize">
        {title ?? type}
        <span class="italic text-slate-400">{metaTitle}</span>
    </summary>

    <h1 class="mb-1 mt-4 text-xl text-white">
        {
            isSSRAndClientHydrated
                ? "SSR + Client Hydrated"
                : "Server Side Rendered"
        }
    </h1>
    <div
        class="flex w-full items-center justify-center rounded-xl bg-slate-900 px-3 py-10 text-zinc-300"
    >
        <slot name="ssr" />
    </div>

    {
        !hideClientHydrated && !isSSRAndClientHydrated && (
            <>
                <h1 class="mb-1 mt-4 text-xl text-white">
                    SSR + Client Hydrated
                </h1>
                <div class="flex w-full items-center justify-center rounded-xl bg-slate-900 px-3 py-10 text-zinc-300">
                    <slot name="ch" />
                </div>
            </>
        )
    }

    {
        !hideClientRendered && !isSSRAndClientHydrated && (
            <>
                <h1 class="mb-1 mt-4 text-xl text-white">Client Rendered</h1>
                <div class="flex w-full items-center justify-center rounded-xl bg-slate-900 px-3 py-10 text-zinc-300">
                    <slot name="co" />
                </div>
            </>
        )
    }

    <h1 class="mb-1 mt-4 text-xl text-white">
        Code
        <span class="text-md italic">
            <GithubLink path={fullPath}>(GitHub)</GithubLink>
        </span>
    </h1>

    <div class="flex rounded-xl bg-slate-800 p-4 text-sm text-slate-300">
        <p class="select-none whitespace-pre">{lines}</p>
        <p class="overflow-x-auto">
            <Code>{code}</Code>
        </p>
    </div>

    {
        endpoint !== undefined && (
            <>
                <h1 class="mb-1 mt-4 text-xl text-white">
                    Endpoint
                    <span class="text-md italic">
                        <GithubLink path={endpoint.path}>(GitHub)</GithubLink>
                    </span>
                </h1>
                <div class="flex rounded-xl bg-slate-800 p-4 text-sm text-slate-300">
                    <p class="select-none whitespace-pre">{endpoint.lines}</p>
                    <p class="overflow-x-auto">
                        <Code>{endpoint.code}</Code>
                    </p>
                </div>
            </>
        )
    }

    {
        exampleInfo && exampleInfo.length > 0 && (
            <>
                <h1 class="mb-1 mt-4 text-xl text-white">Example Notes</h1>
                <ul class="ml-4 list-decimal">
                    {exampleInfo.map((item: string, i: number) => (
                        <li class="ml-5 text-zinc-300">
                            {i === 0 && item.startsWith("https://") ? (
                                <Link
                                    href={item}
                                    class="ml-2 italic"
                                >
                                    Docs
                                </Link>
                            ) : (
                                <p class="ml-2">{item}</p>
                            )}
                        </li>
                    ))}
                </ul>
            </>
        )
    }

    {
        typeInfo && typeInfo.length > 0 && (
            <>
                <h1 class="mb-1 mt-4 text-xl text-white">
                    <span class="capitalize">{type}</span> Notes
                </h1>
                <ul class="ml-4 list-decimal">
                    {typeInfo.map((item: string, i: number) => (
                        <li class="ml-5 text-zinc-300">
                            {i === 0 && item.startsWith("https://") ? (
                                <Link
                                    href={item}
                                    class="ml-2 italic"
                                >
                                    Docs
                                </Link>
                            ) : (
                                <p class="ml-2">{item}</p>
                            )}
                        </li>
                    ))}
                </ul>
            </>
        )
    }
</details>
