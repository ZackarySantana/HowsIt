---
import CardContainer from "./card/card_container.astro";
import CardRenderedSection from "./card/card_rendered_section.astro";
import Code from "@components/code.astro";
import GithubLink from "@components/github_link.astro";
import { GetCodeInformation } from "@utils/getCodeInformation";
import CardList from "./card/card_list.astro";
import Link from "./link.astro";

export interface Props {
    variant?: string;
    library: string;
    lang?: string;
    exampleInfo?: string[];
}

const { variant: aVariant, library, exampleInfo, lang: aLang } = Astro.props;
const variant = aVariant ? `(${aVariant})` : "";
const lang = aLang || "TypeScript";

const example = Astro.locals.example;

let metaTitle = variant;
if (library === "htmx") {
    metaTitle = "(TypeScript)";
    if (lang === "rust") {
        metaTitle = "(Rust)";
    } else if (lang === "go") {
        metaTitle = "(Go)";
    }
}
const { script, endpoint, libraryInfo } = await GetCodeInformation(
    lang,
    library,
    example,
    aVariant,
);

const defaultSlot = Astro.slots.has("default");
const ssr = Astro.slots.has("ssr");
const ch = Astro.slots.has("ch");
const co = Astro.slots.has("co");
---

<CardContainer
    title={library}
    metaTitle={metaTitle}
>
    {
        defaultSlot && (
            <CardRenderedSection>
                <p slot="title">SSR + Client Hydrated (Hybrid)</p>
                <slot />
            </CardRenderedSection>
        )
    }
    {
        ssr && (
            <CardRenderedSection>
                <p slot="title">Server Side Rendered</p>
                <slot name="ssr" />
            </CardRenderedSection>
        )
    }
    {
        ch && (
            <CardRenderedSection>
                <p slot="title">SSR + Client Hydrated (Hybrid)</p>
                <slot name="ch" />
            </CardRenderedSection>
        )
    }
    {
        co && (
            <CardRenderedSection>
                <p slot="title">Client Rendered</p>
                <slot name="co" />
            </CardRenderedSection>
        )
    }
    <CardRenderedSection code={true}>
        <p slot="title">
            Code
            <span class="text-md italic">
                <GithubLink path={script.path}>(GitHub)</GithubLink>
            </span>
        </p>
        <p class="select-none whitespace-pre">{script.lineNumbers}</p>
        <p class="overflow-x-auto">
            <Code>{script.code}</Code>
        </p>
    </CardRenderedSection>
    {
        endpoint !== null && (
            <CardRenderedSection code={true}>
                <p slot="title">
                    Endpoint
                    <span class="text-md italic">
                        <GithubLink path={endpoint.path}>(GitHub)</GithubLink>
                    </span>
                </p>
                <p class="select-none whitespace-pre">{endpoint.lineNumbers}</p>
                <p class="overflow-x-auto">
                    <Code>{endpoint.code}</Code>
                </p>
            </CardRenderedSection>
        )
    }
    <CardList listItems={exampleInfo}>Implementation Details</CardList>
    <CardList listItems={[...libraryInfo.notes]}>
        {library} Notes <Link href={libraryInfo.docs}>(Docs)</Link>
    </CardList>
</CardContainer>
